###Script developed by Matt Layman###
###Geological Tops points to 3D features###
###Advanced GIS, Winter 2015###

###This script takes a a geological tops text file and converts those points into
###a 3D block feature. The user can specify which geological formation they would
###like to build from the text file, since each text file will typically contain data for 3-4
###geological formations. Each data point represents the elevation of the top of
###a particular geological formation. Points are located within existing oil and
###gas wells so better block features are created where there are many oil and gas
###wells located close together across a specific area. The tool also asks for a
###specific area in which the user would like to build a block feature. This should
###be a polygon feature class, usually of a particular Integrated Development Plan (IDP)
###area, which are used by energy companies to divide up their acreage.

#####################################################################################################################################################################

##Import the arcpy and csv modules, set the workspaces, and allow overwriting of data

import arcpy, csv
outFolder = arcpy.GetParameterAsText(0) ##This folder will be used to store the CSVs and TINs generated by the script
outGDB = arcpy.CreateFileGDB_management(outFolder,"TopsData.gdb") ##This geodatabase holds all the intermediate data generated by the script and can be deleted later if the user would like
arcpy.env.workspace = outFolder + "/" + "TopsData.gdb" ##The workspace is set to the geodatabase created above. Files that can't be saved in a GDB such as CSVs and TINs will be saved in "outFolder" which the user defines
arcpy.env.overwriteOutput = True

######################################################################################################################################################################

##The following lines of code are the input variables, description of each will be written in a comment the right of each one

inputTable = arcpy.GetParameterAsText(1) ##This is the input .txt file
xField = arcpy.GetParameterAsText(2)    ##This is the name of the field containing the X coordinate values in the text file
yField = arcpy.GetParameterAsText(3)    ##This is the name of the field containing the Y coordinate values in the text file
prj = arcpy.GetParameterAsText(4)       ##This is the location of the projection file in which you want to project your data, you will probably need to create this beforehand manually. Doing this in the script is extremely tedious and can easily be messed up.
clipFeatures = arcpy.GetParameterAsText(5)  ##This is the feature class that you want to clip the points to, such as an IDP polygon
topsname1 = arcpy.GetParameterAsText(6)     ##This is the name of the geological formation you want to build a block feature of
topsname2 = arcpy.GetParameterAsText(7)     ##This is the name of the geological formation directly BELOW the geological formation you want to build a block feature for
select1 = arcpy.GetParameterAsText(8)  ##This is the SQL expression to select the geological formation's points for the geological formation defined in 'topsname1'
select2 = arcpy.GetParameterAsText(9)  ##This is the SQL expression to select the geological formation's points for the geological formation defined in 'topsname2'
inputDEM = arcpy.GetParameterAsText(10)       ##This is the DEM of the area covered by your polygon defined in 'clipFeatures'
outputlocation = arcpy.GetParameterAsText(11) ##This is the output feature class's location, it should be different than the intermediate data 'TopsData.gdb'

######################################################################################################################################################################

##Check out relevant extensions, the script uses tools from the spatial analyst and 3D analysts extensions

arcpy.CheckOutExtension("spatial")
arcpy.CheckOutExtension("3D")

######################################################################################################################################################################

##Plot the points, clip them to the user-defined area, and select the appropriate formation's points for later use

arcpy.MakeXYEventLayer_management(inputTable,xField,yField,"points",prj) ##This plots the points found in the text file and projects them in the user defined projection
arcpy.CopyFeatures_management("points","full_tops")     ##This copies those features from the layer created above ('points') to a permanent feature class called 'full_tops'
arcpy.Clip_analysis("full_tops",clipFeatures,"tops")    ##This clips the the entire tops file to the user defined study area polygon, ususally an IDP
arcpy.Select_analysis("tops",topsname1,select1)  ##This selects the tops points from the text file of the geological formation the user wants to create a block feature for
arcpy.Select_analysis("tops",topsname2,select2)  ##This selects the tops points from the text file of geological formation directly BELOW the formation the user wants to create a block feature of

######################################################################################################################################################################

##Calculate the true elevation of each point and make sure to exclude null data values from the DEM (-9999)

arcpy.sa.ExtractValuesToPoints(topsname1,inputDEM,topsname1 + "points_elev") ##This takes the value of the DEM at each point, and adds it to a field in the tops file of the formation the user wants to create a block feature of
arcpy.sa.ExtractValuesToPoints(topsname2,inputDEM,topsname2 + "points_elev") ##Same thing as above, but for the formation that is directly below the formation the user wants to create a block feature for

arcpy.Select_analysis(topsname1 + "points_elev",topsname1 + "clean",'RASTERVALU <>  -9999') ##Exludes any points that may have -9999 as their value for elevation as derived from the DEM
arcpy.Select_analysis(topsname2 + "points_elev",topsname2 + "clean",'RASTERVALU <>  -9999') ##Same as above, but for the tops file of the formation directly below the formation the user wants to create a block feature of

arcpy.AddField_management(topsname1 + "clean","True_Elev","DOUBLE") ##Adds a field to hold the true elevation values
arcpy.AddField_management(topsname2 + "clean","True_Elev","DOUBLE") ##Same as above, but for the tops file of the formation directly below the formation the user wants to create a block feature for

arcpy.CalculateField_management(topsname1 + "clean","True_Elev",'(!RASTERVALU!*3.28084) + (!F____SS_VALUE___! * 3.28084)', "PYTHON") ##Calculates the true elevation (in feet, hence the *3.28084) of each point in file. This is accomplished by adding the values of the DEM (positive) to the subsurface values (F____SS_VALUE___, negative).
arcpy.CalculateField_management(topsname2 + "clean","True_Elev",'(!RASTERVALU!*3.28084) + (!F____SS_VALUE___! * 3.28084)', "PYTHON") ##Same as above, but for the tops file of the formation directly below the formation the user wants to create a block feature of

######################################################################################################################################################################

##Create CSV files of each of the tops files, one of the formation the user wants to create a block feature for, and one for the formation directly below the formation the user wants to create a block feature of

rows = arcpy.SearchCursor(topsname1 + "clean") ##creates a cursor to get the data from the processed tops file
csvFile = csv.writer(open(outFolder + "/" + topsname1 + ".csv", 'wb')) ##Create the CSV file, and save it in the outFolder, which is chosen by the user in the tool dialog
fields = [f.name for f in arcpy.ListFields(topsname1 + "clean")] ##Lists the fields in the tops file and adds them to the variable "fields"

allRows = [] ##Empty list to store values
for row in rows:    ##Get every row in the cursor
    rowlist = []
    for field in fields:
        rowlist.append(row.getValue(field)) ##append the value to the list
    allRows.append(rowlist)

##Write the fields and their associated values to the file
csvFile.writerow(fields)
for row in allRows:
    csvFile.writerow(row)

###second CSV file, for the tops file of the formation directly below the formation the user wants to create a block feature for

rows = arcpy.SearchCursor(topsname2 + "clean")  ##creates a cursor to get the data from the processed tops file
csvFile = csv.writer(open(outFolder + "/" + topsname2 + ".csv", 'wb'))  ##Create the CSV file, and save it in the outFolder, which is chosen by the user in the tool dialog
fields = [f.name for f in arcpy.ListFields(topsname2 + "clean")]  ##Lists the fields in the tops file and adds them to the variable "fields"

allRows = [] ##Empty list to store values
for row in rows:  ##Get every row in the cursor
    rowlist = []
    for field in fields:
        rowlist.append(row.getValue(field))  ##append the value to the list
    allRows.append(rowlist)

##Write the fields and their associated values to the file
csvFile.writerow(fields)
for row in allRows:
    csvFile.writerow(row)

############################################################################################################################################################################

##Convert the features to 3D features, Create TINs, and extrude between the TINs to create the block feature

arcpy.FeatureTo3DByAttribute_3d(topsname1 + "clean",topsname1 + "_ThreeD","True_Elev") ##This converts the tops file processed up until this point and creates 3D features of it using the "True_Elev" as the height field
arcpy.FeatureTo3DByAttribute_3d(topsname2 + "clean",topsname2 + "_ThreeD","True_Elev") ##The same as above, but for the tops file of the formation directly below the formation the user wants to create a block feature of

tinfc1 = topsname1 + "_ThreeD" ##Creates a variable of the 3D features created above to be used in the Create TIN scriptinput
tinfc2 = topsname2 + "_ThreeD" ##Same as above, but for the tops file of the formation directly below the formation the user wants to create a block feature of

tin1 = arcpy.CreateTin_3d(outFolder + "/" + topsname1,prj,[[tinfc1, "True_Elev", "masspoints"]]) ##Creates a TIN from the 3D features, using "True_Elev" as its height field
tin2 = arcpy.CreateTin_3d(outFolder + "/" + topsname2,prj,[[tinfc2, "True_Elev", "masspoints"]]) ##Same as above, but for the tops file of the formation directly below the formation the user wants to create a block feature of

extrude = arcpy.MinimumBoundingGeometry_management("points","tin_boundary","CONVEX_HULL") ##The boundary of the area covered by the two tops files, this will then be extruded to create the 3D feature
arcpy.ExtrudeBetween_3d(tin1,tin2,extrude,outputlocation) ##Extrude between the two TINs to create the final, output 3D block feature to be viewed and analyzed in ArcScene

############################################################################################################################################################################

##Check in the extensions used in this script
arcpy.CheckInExtension("spatial")
arcpy.CheckInExtension("3D")







